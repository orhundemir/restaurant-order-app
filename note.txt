package com.orhundemir.restaurant_order_app.user_service.controller;


import com.orhundemir.restaurant_order_app.user_service.dto.request.UserRequest;
import com.orhundemir.restaurant_order_app.user_service.dto.response.UserInfoResponse;
import com.orhundemir.restaurant_order_app.user_service.mapper.MapStructMapperImpl;
import com.orhundemir.restaurant_order_app.user_service.service.UserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;


@RestController
@RequestMapping("/users")
public class UserController {

    private final UserService userService;
    private final MapStructMapperImpl mapStructMapper;


    public UserController(UserService userService, MapStructMapperImpl mapStructMapper) {
        this.userService = userService;
        this.mapStructMapper = mapStructMapper;
    }

    // Kullanıcı oluşturma
    @PostMapping
    public ResponseEntity<UserInfoResponse> createUser(@RequestBody UserRequest userRequest) {
        UserInfoResponse userInfoResponse = mapStructMapper.toUserInfoResponse(userService.createUser(userRequest));
        return new ResponseEntity<>(userInfoResponse, HttpStatus.CREATED);
    }

    // Kullanıcı bilgilerini alma
    @GetMapping("/{userId}")
    public ResponseEntity<UserInfoResponse> getUserInfo(@PathVariable String userId) {
        UserInfoResponse userInfoResponse = userService.getUserInfo(userId);
        return new ResponseEntity<>(userInfoResponse, HttpStatus.OK);
    }

    // Tüm kullanıcıları listeleme
    @GetMapping
    public ResponseEntity<List<UserInfoResponse>> getAllUsers() {
        List<UserInfoResponse> userInfoResponses = userService.getAllUsers();
        return new ResponseEntity<>(userInfoResponses, HttpStatus.OK);
    }

    @GetMapping("/sellers")
    public ResponseEntity<List<UserInfoResponse>> getAllSellers() {
        List<UserInfoResponse> userInfoResponses = userService.getAllSellers();
        return new ResponseEntity<>(userInfoResponses, HttpStatus.OK);
    }
}


package com.orhundemir.restaurant_order_app.user_service.entity;

import lombok.Getter;


@Getter
public enum RoleEntity {
    ROLE_USER("USER"),
    ROLE_ADMIN("ADMIN"),
    ROLE_MOD("MOD"),
    ROLE_SELLER ("SELLER");

    private final String value;

    RoleEntity(String value) {
        this.value = value;
    }

}


package com.orhundemir.restaurant_order_app.user_service.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.ColumnDefault;
import org.hibernate.annotations.UuidGenerator;

import java.util.Date;
import java.util.Set;
import java.util.UUID;

@Entity
@Table(name = "User")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Builder
public class UserEntity {

    @Id
    @UuidGenerator(style = UuidGenerator.Style.TIME)
    private UUID id;


    @Column(nullable = false)
    private String name;

    @Column(unique = true, nullable = false)
    private String email;

    @Column(nullable = false)
    private String password;

    @Column(unique = true, nullable = false)
    private String address;

    @Column(unique = true, nullable = false)
    private String phoneNumber;

    @Column(nullable = false, updatable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdAt;

    @Column( nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date updatedAt;

    @ColumnDefault(value = "true")
    private boolean status;


    @ElementCollection(targetClass = RoleEntity.class, fetch = FetchType.LAZY)
    @JoinTable(name = "Role", joinColumns = @JoinColumn(name = "userId"))
    @Column(name = "roleName", nullable = false)
    @Enumerated(EnumType.STRING)
    private Set<RoleEntity> authorities;
}


package com.orhundemir.restaurant_order_app.user_service.dto.request;


import com.orhundemir.restaurant_order_app.user_service.entity.RoleEntity;
import lombok.*;
import java.util.Set;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserRequest {
     String name;
     String email;
     String password;
     String address;
     String phoneNumber;
     Set<RoleEntity> authorities;
 }


package com.orhundemir.restaurant_order_app.user_service.dto.response;

import lombok.*;

import java.util.Date;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Builder
public class UserInfoResponse {
    UUID userId;
    String name;
    String email;
    String address;
    String phoneNumber;
    boolean status;
    Date createdAt;
    Date updatedAt;

}


package com.orhundemir.restaurant_order_app.user_service.mapper;

import com.orhundemir.restaurant_order_app.user_service.dto.request.UserRequest;
import com.orhundemir.restaurant_order_app.user_service.dto.response.UserInfoResponse;
import com.orhundemir.restaurant_order_app.user_service.entity.UserEntity;
import org.springframework.stereotype.Component;

import java.util.Date;


@Component
public class MapStructMapperImpl implements MapStructMapper {
    @Override
    public UserRequest toUserRequest(UserEntity userEntity) {

        return UserRequest.builder()
                .address(userEntity.getAddress())
                .name(userEntity.getName())
                .authorities(userEntity.getAuthorities())
                .phoneNumber(userEntity.getPhoneNumber())
                .email(userEntity.getEmail())
                .build();
    }

    @Override
    public UserEntity toUserEntity(UserRequest userDTO) {
        Date now = new Date();
        return UserEntity.builder()
                .address(userDTO.getAddress())
                .name(userDTO.getName())
                .authorities(userDTO.getAuthorities())
                .phoneNumber(userDTO.getPhoneNumber())
                .createdAt(now)
                .password(userDTO.getPassword())
                .updatedAt(now)
                .email(userDTO.getEmail())
                .build();
    }

    @Override
    public UserInfoResponse toUserInfoResponse(UserEntity user) {
        return UserInfoResponse.builder()
                .phoneNumber(user.getPhoneNumber())
                .userId(user.getId())
                .email(user.getEmail())
                .address(user.getAddress())
                .name(user.getName())
                .status(user.isStatus())
                .createdAt(user.getCreatedAt())
                .updatedAt(user.getUpdatedAt())
                .build();
    }
    @Override
    public UserEntity toUserEntity(UserInfoResponse userInfoResponse) {
        return UserEntity.builder()
                .phoneNumber(userInfoResponse.getPhoneNumber())
                .id(userInfoResponse.getUserId())
                .email(userInfoResponse.getEmail())
                .address(userInfoResponse.getAddress())
                .name(userInfoResponse.getName())
                .status(userInfoResponse.isStatus())
                .createdAt(userInfoResponse.getCreatedAt())
                .updatedAt(userInfoResponse.getUpdatedAt())
                .build();
    }
}
